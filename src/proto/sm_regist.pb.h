// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sm_regist.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sm_5fregist_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sm_5fregist_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sm_5fregist_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sm_5fregist_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sm_5fregist_2eproto;
namespace dfs {
namespace proto {
namespace sm_regist {
class request_t;
struct request_tDefaultTypeInternal;
extern request_tDefaultTypeInternal _request_t_default_instance_;
class response_t;
struct response_tDefaultTypeInternal;
extern response_tDefaultTypeInternal _response_t_default_instance_;
class storage_info_t;
struct storage_info_tDefaultTypeInternal;
extern storage_info_tDefaultTypeInternal _storage_info_t_default_instance_;
}  // namespace sm_regist
}  // namespace proto
}  // namespace dfs
PROTOBUF_NAMESPACE_OPEN
template<> ::dfs::proto::sm_regist::request_t* Arena::CreateMaybeMessage<::dfs::proto::sm_regist::request_t>(Arena*);
template<> ::dfs::proto::sm_regist::response_t* Arena::CreateMaybeMessage<::dfs::proto::sm_regist::response_t>(Arena*);
template<> ::dfs::proto::sm_regist::storage_info_t* Arena::CreateMaybeMessage<::dfs::proto::sm_regist::storage_info_t>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dfs {
namespace proto {
namespace sm_regist {

// ===================================================================

class storage_info_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dfs.proto.sm_regist.storage_info_t) */ {
 public:
  inline storage_info_t() : storage_info_t(nullptr) {}
  ~storage_info_t() override;
  explicit PROTOBUF_CONSTEXPR storage_info_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  storage_info_t(const storage_info_t& from);
  storage_info_t(storage_info_t&& from) noexcept
    : storage_info_t() {
    *this = ::std::move(from);
  }

  inline storage_info_t& operator=(const storage_info_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline storage_info_t& operator=(storage_info_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const storage_info_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const storage_info_t* internal_default_instance() {
    return reinterpret_cast<const storage_info_t*>(
               &_storage_info_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(storage_info_t& a, storage_info_t& b) {
    a.Swap(&b);
  }
  inline void Swap(storage_info_t* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(storage_info_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  storage_info_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<storage_info_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const storage_info_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const storage_info_t& from) {
    storage_info_t::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(storage_info_t* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dfs.proto.sm_regist.storage_info_t";
  }
  protected:
  explicit storage_info_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 4,
    kIdFieldNumber = 1,
    kPortFieldNumber = 2,
    kMagicFieldNumber = 3,
  };
  // string ip = 4;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 port = 2;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // uint32 magic = 3;
  void clear_magic();
  uint32_t magic() const;
  void set_magic(uint32_t value);
  private:
  uint32_t _internal_magic() const;
  void _internal_set_magic(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dfs.proto.sm_regist.storage_info_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    uint32_t id_;
    uint32_t port_;
    uint32_t magic_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sm_5fregist_2eproto;
};
// -------------------------------------------------------------------

class request_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dfs.proto.sm_regist.request_t) */ {
 public:
  inline request_t() : request_t(nullptr) {}
  ~request_t() override;
  explicit PROTOBUF_CONSTEXPR request_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  request_t(const request_t& from);
  request_t(request_t&& from) noexcept
    : request_t() {
    *this = ::std::move(from);
  }

  inline request_t& operator=(const request_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline request_t& operator=(request_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const request_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const request_t* internal_default_instance() {
    return reinterpret_cast<const request_t*>(
               &_request_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(request_t& a, request_t& b) {
    a.Swap(&b);
  }
  inline void Swap(request_t* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(request_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  request_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<request_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const request_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const request_t& from) {
    request_t::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(request_t* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dfs.proto.sm_regist.request_t";
  }
  protected:
  explicit request_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStorageInfoFieldNumber = 1,
    kMasterMagicFieldNumber = 2,
  };
  // .dfs.proto.sm_regist.storage_info_t storage_info = 1;
  bool has_storage_info() const;
  private:
  bool _internal_has_storage_info() const;
  public:
  void clear_storage_info();
  const ::dfs::proto::sm_regist::storage_info_t& storage_info() const;
  PROTOBUF_NODISCARD ::dfs::proto::sm_regist::storage_info_t* release_storage_info();
  ::dfs::proto::sm_regist::storage_info_t* mutable_storage_info();
  void set_allocated_storage_info(::dfs::proto::sm_regist::storage_info_t* storage_info);
  private:
  const ::dfs::proto::sm_regist::storage_info_t& _internal_storage_info() const;
  ::dfs::proto::sm_regist::storage_info_t* _internal_mutable_storage_info();
  public:
  void unsafe_arena_set_allocated_storage_info(
      ::dfs::proto::sm_regist::storage_info_t* storage_info);
  ::dfs::proto::sm_regist::storage_info_t* unsafe_arena_release_storage_info();

  // uint32 master_magic = 2;
  void clear_master_magic();
  uint32_t master_magic() const;
  void set_master_magic(uint32_t value);
  private:
  uint32_t _internal_master_magic() const;
  void _internal_set_master_magic(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dfs.proto.sm_regist.request_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::dfs::proto::sm_regist::storage_info_t* storage_info_;
    uint32_t master_magic_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sm_5fregist_2eproto;
};
// -------------------------------------------------------------------

class response_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dfs.proto.sm_regist.response_t) */ {
 public:
  inline response_t() : response_t(nullptr) {}
  ~response_t() override;
  explicit PROTOBUF_CONSTEXPR response_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  response_t(const response_t& from);
  response_t(response_t&& from) noexcept
    : response_t() {
    *this = ::std::move(from);
  }

  inline response_t& operator=(const response_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline response_t& operator=(response_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const response_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const response_t* internal_default_instance() {
    return reinterpret_cast<const response_t*>(
               &_response_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(response_t& a, response_t& b) {
    a.Swap(&b);
  }
  inline void Swap(response_t* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(response_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  response_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<response_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const response_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const response_t& from) {
    response_t::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(response_t* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dfs.proto.sm_regist.response_t";
  }
  protected:
  explicit response_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStorageInfoFieldNumber = 1,
  };
  // repeated .dfs.proto.sm_regist.storage_info_t storage_info = 1;
  int storage_info_size() const;
  private:
  int _internal_storage_info_size() const;
  public:
  void clear_storage_info();
  ::dfs::proto::sm_regist::storage_info_t* mutable_storage_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dfs::proto::sm_regist::storage_info_t >*
      mutable_storage_info();
  private:
  const ::dfs::proto::sm_regist::storage_info_t& _internal_storage_info(int index) const;
  ::dfs::proto::sm_regist::storage_info_t* _internal_add_storage_info();
  public:
  const ::dfs::proto::sm_regist::storage_info_t& storage_info(int index) const;
  ::dfs::proto::sm_regist::storage_info_t* add_storage_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dfs::proto::sm_regist::storage_info_t >&
      storage_info() const;

  // @@protoc_insertion_point(class_scope:dfs.proto.sm_regist.response_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dfs::proto::sm_regist::storage_info_t > storage_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sm_5fregist_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// storage_info_t

// uint32 id = 1;
inline void storage_info_t::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t storage_info_t::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t storage_info_t::id() const {
  // @@protoc_insertion_point(field_get:dfs.proto.sm_regist.storage_info_t.id)
  return _internal_id();
}
inline void storage_info_t::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void storage_info_t::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:dfs.proto.sm_regist.storage_info_t.id)
}

// uint32 port = 2;
inline void storage_info_t::clear_port() {
  _impl_.port_ = 0u;
}
inline uint32_t storage_info_t::_internal_port() const {
  return _impl_.port_;
}
inline uint32_t storage_info_t::port() const {
  // @@protoc_insertion_point(field_get:dfs.proto.sm_regist.storage_info_t.port)
  return _internal_port();
}
inline void storage_info_t::_internal_set_port(uint32_t value) {
  
  _impl_.port_ = value;
}
inline void storage_info_t::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:dfs.proto.sm_regist.storage_info_t.port)
}

// uint32 magic = 3;
inline void storage_info_t::clear_magic() {
  _impl_.magic_ = 0u;
}
inline uint32_t storage_info_t::_internal_magic() const {
  return _impl_.magic_;
}
inline uint32_t storage_info_t::magic() const {
  // @@protoc_insertion_point(field_get:dfs.proto.sm_regist.storage_info_t.magic)
  return _internal_magic();
}
inline void storage_info_t::_internal_set_magic(uint32_t value) {
  
  _impl_.magic_ = value;
}
inline void storage_info_t::set_magic(uint32_t value) {
  _internal_set_magic(value);
  // @@protoc_insertion_point(field_set:dfs.proto.sm_regist.storage_info_t.magic)
}

// string ip = 4;
inline void storage_info_t::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& storage_info_t::ip() const {
  // @@protoc_insertion_point(field_get:dfs.proto.sm_regist.storage_info_t.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void storage_info_t::set_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dfs.proto.sm_regist.storage_info_t.ip)
}
inline std::string* storage_info_t::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:dfs.proto.sm_regist.storage_info_t.ip)
  return _s;
}
inline const std::string& storage_info_t::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void storage_info_t::_internal_set_ip(const std::string& value) {
  
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* storage_info_t::_internal_mutable_ip() {
  
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* storage_info_t::release_ip() {
  // @@protoc_insertion_point(field_release:dfs.proto.sm_regist.storage_info_t.ip)
  return _impl_.ip_.Release();
}
inline void storage_info_t::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dfs.proto.sm_regist.storage_info_t.ip)
}

// -------------------------------------------------------------------

// request_t

// .dfs.proto.sm_regist.storage_info_t storage_info = 1;
inline bool request_t::_internal_has_storage_info() const {
  return this != internal_default_instance() && _impl_.storage_info_ != nullptr;
}
inline bool request_t::has_storage_info() const {
  return _internal_has_storage_info();
}
inline void request_t::clear_storage_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.storage_info_ != nullptr) {
    delete _impl_.storage_info_;
  }
  _impl_.storage_info_ = nullptr;
}
inline const ::dfs::proto::sm_regist::storage_info_t& request_t::_internal_storage_info() const {
  const ::dfs::proto::sm_regist::storage_info_t* p = _impl_.storage_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::dfs::proto::sm_regist::storage_info_t&>(
      ::dfs::proto::sm_regist::_storage_info_t_default_instance_);
}
inline const ::dfs::proto::sm_regist::storage_info_t& request_t::storage_info() const {
  // @@protoc_insertion_point(field_get:dfs.proto.sm_regist.request_t.storage_info)
  return _internal_storage_info();
}
inline void request_t::unsafe_arena_set_allocated_storage_info(
    ::dfs::proto::sm_regist::storage_info_t* storage_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.storage_info_);
  }
  _impl_.storage_info_ = storage_info;
  if (storage_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dfs.proto.sm_regist.request_t.storage_info)
}
inline ::dfs::proto::sm_regist::storage_info_t* request_t::release_storage_info() {
  
  ::dfs::proto::sm_regist::storage_info_t* temp = _impl_.storage_info_;
  _impl_.storage_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dfs::proto::sm_regist::storage_info_t* request_t::unsafe_arena_release_storage_info() {
  // @@protoc_insertion_point(field_release:dfs.proto.sm_regist.request_t.storage_info)
  
  ::dfs::proto::sm_regist::storage_info_t* temp = _impl_.storage_info_;
  _impl_.storage_info_ = nullptr;
  return temp;
}
inline ::dfs::proto::sm_regist::storage_info_t* request_t::_internal_mutable_storage_info() {
  
  if (_impl_.storage_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::dfs::proto::sm_regist::storage_info_t>(GetArenaForAllocation());
    _impl_.storage_info_ = p;
  }
  return _impl_.storage_info_;
}
inline ::dfs::proto::sm_regist::storage_info_t* request_t::mutable_storage_info() {
  ::dfs::proto::sm_regist::storage_info_t* _msg = _internal_mutable_storage_info();
  // @@protoc_insertion_point(field_mutable:dfs.proto.sm_regist.request_t.storage_info)
  return _msg;
}
inline void request_t::set_allocated_storage_info(::dfs::proto::sm_regist::storage_info_t* storage_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.storage_info_;
  }
  if (storage_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(storage_info);
    if (message_arena != submessage_arena) {
      storage_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.storage_info_ = storage_info;
  // @@protoc_insertion_point(field_set_allocated:dfs.proto.sm_regist.request_t.storage_info)
}

// uint32 master_magic = 2;
inline void request_t::clear_master_magic() {
  _impl_.master_magic_ = 0u;
}
inline uint32_t request_t::_internal_master_magic() const {
  return _impl_.master_magic_;
}
inline uint32_t request_t::master_magic() const {
  // @@protoc_insertion_point(field_get:dfs.proto.sm_regist.request_t.master_magic)
  return _internal_master_magic();
}
inline void request_t::_internal_set_master_magic(uint32_t value) {
  
  _impl_.master_magic_ = value;
}
inline void request_t::set_master_magic(uint32_t value) {
  _internal_set_master_magic(value);
  // @@protoc_insertion_point(field_set:dfs.proto.sm_regist.request_t.master_magic)
}

// -------------------------------------------------------------------

// response_t

// repeated .dfs.proto.sm_regist.storage_info_t storage_info = 1;
inline int response_t::_internal_storage_info_size() const {
  return _impl_.storage_info_.size();
}
inline int response_t::storage_info_size() const {
  return _internal_storage_info_size();
}
inline void response_t::clear_storage_info() {
  _impl_.storage_info_.Clear();
}
inline ::dfs::proto::sm_regist::storage_info_t* response_t::mutable_storage_info(int index) {
  // @@protoc_insertion_point(field_mutable:dfs.proto.sm_regist.response_t.storage_info)
  return _impl_.storage_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dfs::proto::sm_regist::storage_info_t >*
response_t::mutable_storage_info() {
  // @@protoc_insertion_point(field_mutable_list:dfs.proto.sm_regist.response_t.storage_info)
  return &_impl_.storage_info_;
}
inline const ::dfs::proto::sm_regist::storage_info_t& response_t::_internal_storage_info(int index) const {
  return _impl_.storage_info_.Get(index);
}
inline const ::dfs::proto::sm_regist::storage_info_t& response_t::storage_info(int index) const {
  // @@protoc_insertion_point(field_get:dfs.proto.sm_regist.response_t.storage_info)
  return _internal_storage_info(index);
}
inline ::dfs::proto::sm_regist::storage_info_t* response_t::_internal_add_storage_info() {
  return _impl_.storage_info_.Add();
}
inline ::dfs::proto::sm_regist::storage_info_t* response_t::add_storage_info() {
  ::dfs::proto::sm_regist::storage_info_t* _add = _internal_add_storage_info();
  // @@protoc_insertion_point(field_add:dfs.proto.sm_regist.response_t.storage_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dfs::proto::sm_regist::storage_info_t >&
response_t::storage_info() const {
  // @@protoc_insertion_point(field_list:dfs.proto.sm_regist.response_t.storage_info)
  return _impl_.storage_info_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sm_regist
}  // namespace proto
}  // namespace dfs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sm_5fregist_2eproto
